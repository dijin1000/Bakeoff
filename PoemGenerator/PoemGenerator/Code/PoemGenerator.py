import json
import functions as F
import os.path as PATH
import os as OS
import nltk
import sys
from nltk.corpus import gutenberg

#Handling the first input concerning if the right corpus are loaded in the system
if(not PATH.exists(PATH.join(OS.getcwd(),"Data_Output/stories.json"))):
    if(len(sys.argv) == 0 or sys.argv[0] == True):
        valid = False
        while(not valid):
            print("")
            valid_corpus = str(input())
            if(valid_corpus.lower() == "true" or valid_corpus.lower() == "false"):
                if(valid_corpus.lower() == "true"):
                    nltk.download()
                valid = True

    elif(len(sys.argv) != 0 and sys.argv[0] != False):
        print("The first argument is not a valid argument")
        exit()


    sentences = gutenberg.sents('austen-emma.txt')
    sentences += gutenberg.sents('austen-persuasion.txt')
    sentences += gutenberg.sents('austen-sense.txt')
    #sentences += gutenberg.sents('bible-kjv.txt')
    #sentences += gutenberg.sents('blake-poems.txt')
    #sentences += gutenberg.sents('bryant-stories.txt')
    #sentences += gutenberg.sents('burgess-busterbrown.txt')
    #sentences += gutenberg.sents('carroll-alice.txt')
    #sentences += gutenberg.sents('chesterton-ball.txt')
    #sentences += gutenberg.sents('chesterton-brown.txt')
    #sentences += gutenberg.sents('chesterton-thursday.txt')
    #sentences += gutenberg.sents('edgeworth-parents.txt')
    #sentences += gutenberg.sents('melville-moby_dick.txt')
    #sentences += gutenberg.sents('milton-paradise.txt')
    #sentences += gutenberg.sents('shakespeare-caesar.txt')
    #sentences += gutenberg.sents('shakespeare-hamlet.txt')
    #sentences += gutenberg.sents('shakespeare-macbeth.txt')
    #sentences += gutenberg.sents('whitman-leaves.txt')


    n_grams = []
    for sentence in sentences:
        n_grams += F.reversen_grams(sentence, 3)

    model = F.setupModel(n_grams)

    with open('Data_Output/stories.json', 'w') as outfile:
        json.dump(model, outfile)

with open('Data_Output/stories.json', 'r') as infile:    
    corpus = json.load(infile)
  
filestream = open('Data_Output/poems.html','w')
filestream.write("""<!DOCTYPE html>
<html>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="style.css">
<body>
<section style="background-color:black">
<img class="mySlides" src="Images/img_1.jpg"style="display:block;margin-left:auto;margin-right:auto;height:300px">
<img class="mySlides" src="Images/img_2.jpg"style="display:block;margin-left:auto;margin-right:auto;height:300px">
<img class="mySlides" src="Images/img_3.jpg"style="display:block;margin-left:auto;margin-right:auto;height:300px">
<img class="mySlides" src="Images/img_4.jpg"style="display:block;margin-left:auto;margin-right:auto;height:300px">
<img class="mySlides" src="Images/img_5.jpg"style="display:block;margin-left:auto;margin-right:auto;height:300px">
</section>

<section class="w3-container w3-center w3-content" style="max-width:600px;padding-bottom:3cm">
<h2 class="w3-wide">A Little Book of Generated Poems by PoemGenerator</h2>
<p class="w3-opacity"><i>An old silent pond</br>
A frog jumps into the pond</br>
Splash! Silence again. </br><b>- Matsuo Basho</b></i></p>
<p class="w3-justify">We are two students at the University of Leiden and we created this simple website to share the poems generated by our Poem Generator. It will nothing be like the haiku above but hey, it is computer program taking a shot at poetry. Hopefully this presentation will brighten your day and inspire to do great things.</p><p style="text-align:right"><i>Egon Janssen & Unmukt Deswal</i></p>
</section>
<section class="w3-row-padding w3-center w3-light-grey">""") 


if(len(sys.argv) == 1 or int(sys.argv[1]) < 1):
    valid_poems = 0
    while(valid_poems < 1):
        print("A invalid or no input has been given for the amount of poems to be generated. Please enter a positive number of poems that should be generated:")
        valid_poems = int(input())
else:
    valid_poems = int(sys.argv[1])

if(len(sys.argv) <= 2 or int(sys.argv[2]) < 1):
    valid_couplets = 0
    while(valid_couplets < 1):
        print("An invalid or no input has been given for the amount of couplets in the poems. Please enter a positive number of couplets a poem should contain:")
        valid_couplets = int(input())
else:
    valid_couplets = int(sys.argv[2])

for x in range(valid_poems):
    F.addPoem(corpus,filestream,valid_couplets)

filestream.write("""</section>
<script>
// Automatic Slideshow - change image every 3 seconds
var myIndex = 0;
carousel();

function carousel() {
  var i;
  var x = document.getElementsByClassName("mySlides");
  for (i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }
  myIndex++;
  if (myIndex > x.length) {myIndex = 1}
  x[myIndex-1].style.display = "block";
  setTimeout(carousel, 6000);
}
</script>

</body>
</html>""")
filestream.close()
